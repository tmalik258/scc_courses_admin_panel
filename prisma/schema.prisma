generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id        String   @id @db.Uuid
  userId    String   @unique @map("user_id") @db.Uuid
  email     String?  @unique
  fullName  String?  @map("full_name")
  avatarUrl String?  @map("avatar_url")
  role      Role     @default(STUDENT)
  bio       String?
  phone     String?
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  instructorCourses Course[]        @relation("CourseInstructor")
  progress          Progress[]
  certificates      Certificate[]
  reviews           Review[]
  purchases         Purchase[]
  paypalCustomer    PaypalCustomer?

  @@map("profiles")
}

model Course {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String
  description  String?
  instructorId String     @map("instructor_id") @db.Uuid
  categoryId   String     @map("category_id") @db.Uuid
  thumbnailUrl String?    @map("thumbnail_url")
  price        Decimal?   @db.Decimal(10, 2)
  isPublished  Boolean    @default(false) @map("is_published")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  // Relationships
  instructor   Profile       @relation("CourseInstructor", fields: [instructorId], references: [id], onDelete: Cascade)
  category     Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  sections     Section[]
  certificates Certificate[]
  reviews      Review[]
  purchases    Purchase[]
  modules      Module[]
  resources    Resource[]

  @@map("courses")
}

model Category {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique
  slug        String   @unique
  description String?
  icon        String?
  color       String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")

  courses     Course[]

  @@map("categories")
}

model Certificate {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studentId      String    @map("student_id") @db.Uuid
  courseId       String    @map("course_id") @db.Uuid
  templateUrl    String?   @map("template_url")
  certificateUrl String?   @map("certificate_url")
  grade          String?
  score          Float?
  issuedAt       DateTime  @default(now()) @map("issued_at")
  expiresAt      DateTime? @map("expires_at")

  student Profile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@map("certificates")
}

model Review {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  courseId  String   @map("course_id") @db.Uuid
  studentId String   @map("student_id") @db.Uuid
  rating    Int      @db.SmallInt
  comment   String?
  isPublic  Boolean  @default(true) @map("is_public")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  course    Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student   Profile @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([courseId, studentId])
  @@map("reviews")
}

model Progress {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studentId   String    @map("student_id") @db.Uuid
  sectionId    String    @map("section_id") @db.Uuid
  isCompleted Boolean   @default(false) @map("is_completed")
  completedAt DateTime? @map("completed_at")
  watchTime   Int       @default(0) @map("watch_time")
  lastWatched DateTime? @map("last_watched")

  student     Profile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  section      Section  @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([studentId, sectionId])
  @@map("progress")
}

model Purchase {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  studentId String   @map("student_id") @db.Uuid
  courseId  String   @map("course_id") @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student   Profile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course    Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  invoice   Invoice?

  @@unique([studentId, courseId])
  @@index([courseId])
  @@map("purchases")
}

model Invoice {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  purchaseId    String   @unique @map("purchase_id") @db.Uuid
  invoiceNumber String   @unique @map("invoice_number")
  paymentDate   DateTime @map("payment_date")
  paymentMethod String   @map("payment_method")
  totalAmount   Decimal  @map("total_amount") @db.Decimal(10, 2)
  status        String   @default("SUCCESS") @map("status")
  category      String?
  courseName    String   @map("course_name")
  studentName   String   @map("student_name")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  purchase      Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model PaypalCustomer {
  id               String @id @default(uuid())
  studentId        String @unique @map("student_id") @db.Uuid
  paypalCustomerId String @unique
  student          Profile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("paypal_customers")
}

model Module {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  courseId  String   @db.Uuid
  title     String
  course    Course   @relation(fields: [courseId], references: [id])
  sections  Section[]
}

model Section {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  courseId  String   @map("course_id") @db.Uuid
  moduleId  String   @db.Uuid
  title     String
  reading   String?
  videoUrl  String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  module    Module   @relation(fields: [moduleId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  progress  Progress[]

  @@map("sections")
}

model Resource {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  courseId  String   @db.Uuid
  title     String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  course    Course   @relation(fields: [courseId], references: [id])

  @@index([courseId])
  @@map("resources")
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  DROPPED
  SUSPENDED
  EXPIRED
}
